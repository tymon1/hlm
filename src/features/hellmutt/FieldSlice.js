import { createSlice } from '@reduxjs/toolkit';
// import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';



export const fieldsSlice = createSlice({

  name: 'store',

  initialState: {

		// naming convention
		// pellets: unique id: p+{unique number}
		ramps: [
			{ no: 0, pellets: [], 
				truck: {} },

			{ no: 1, pellets: [], 
				truck: {} },

			{ no: 2, pellets: [], 
				truck: {} },
		],

		fields: [
			{ no: 0, pellets: [{id:'p1', c:'red'}, {id:'p2', c:'orange'}, {id:'p7', c:'white'}, {id:'p6', c:'purple'}, {id:'p3', c:'brown'}] },
			{ no: 1, pellets: [] },
			{ no: 2, pellets: [{id:'p4', c:'black'}, {id:'p5', c:'green'}] },
			{ no: 3, pellets: [{id:'p8', c:'blue'}] },
			{ no: 4, pellets: [] },
			{ no: 5, pellets: [] },
			{ no: 6, pellets: [] },
			{ no: 7, pellets: [] },
		],
	},


  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
		remove: (state, payload) => {
			let name = payload.payload.name
			let index = payload.payload.index
			let id = payload.payload.id

			if (name === "field") {
				let rmIndex = state.fields[index].pellets.findIndex( inx => inx.id === id )
				state.fields[index].pellets.splice(rmIndex, 1)
			}

			if (name === "ramp") {
				let rmIndex = state.ramps[index].pellets.findIndex( inx => inx.id === id )
				state.ramps[index].pellets.splice(rmIndex, 1)
			}

			if (name === "truck") {
				// index is useless here
				// console.log("indeks rampy",index, "szukam id",id,"w",JSON.stringify(state.ramps[index].truck.pellets ) )

				let rmIndex = state.ramps[truIndex].truck.pellets.findIndex( inx => inx.id === id )
				state.ramps[truIndex].truck.pellets.splice(rmIndex, 1)
			}
		},
							 
		add: (state, payload) => {
			let name = payload.payload.name
			let index = payload.payload.index
			// payload iz pellet or truck
			let object = payload.payload.pellet

			if (name === "field") {
				state.fields[index].pellets.push( object ) 
			}
			if (name === "ramp") {
				state.ramps[index].pellets.push( object ) 
			}
			if (name === "truck") {
				state.ramps[index].truck.pellets.push( object ) 
			}
			if (name === "extRamp") {
				state.ramps[index].truck = object 
			  // todo
				//console.log( JSON.stringify(state) )
			}
		},

    sdump: (state) => {
			console.log("fields", JSON.stringify(state.fields, null, 2) )
			console.log("ramps", JSON.stringify(state.ramps, null, 2) )
		},

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});


//export const selectCount = (state) => state.counter

export const { add, remove, sdump } = fieldsSlice.actions;
export default fieldsSlice.reducer;
