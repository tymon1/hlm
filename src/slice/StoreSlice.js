import { createSlice } from '@reduxjs/toolkit';
// import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';



export const storeSlice = createSlice({

  name: 'store',

  initialState: {

		// trucks with load waiting in line for unload
		queue: [

			{ id: 1, type: 's', cover: true, ready: false,
				pallets: [{id:'p13', c:'red'}] },

			{ id: 2, type: 'm', cover: true, ready: false, 
				pallets: [{id:'p11', c:'pink'}, {id:'p12', c:'blue'}] },

			{ id: 3, type: 'xl', cover: true, ready: false, 
				pallets: [{id:'p9', c:'pink'}, {id:'p10', c:'green'}] }
		],

		docks: [
		],

		// ramps either as store zones and place for trucks
		ramps: [

			{ no: 0, pallets: [], 
				truck: {} },

			{ no: 1, pallets: [], 
				truck: {} },

			{ no: 2, pallets: [], 
				truck: {} },
		],


		// store zones with pallets
		zones: [

			{ no: 0, 
				pallets: [
					{id:'p1', c:'red'}, 
					{id:'p2', c:'orange'}, 
					{id:'p7', c:'white'}, 
					{id:'p6', c:'purple'}, 
				] 
			},

			{ no: 1, pallets: [] },

			{ no: 2, 
				pallets: [
					{id:'p4', c:'black'}, 
					{id:'p5', c:'green'}
				] 
			},

			{ no: 3, 
				pallets: [ {id:'p8', c:'blue'} ] 
			},

			{ no: 4, pallets: [] },
			{ no: 5, pallets: [] },
			{ no: 6, pallets: [] },
			{ no: 7, pallets: [] },
		],
	},


  // REDUCERS 
  reducers: {

    addQueueTruck: (state, payload) => {
			state.queue.push( payload.payload )
		},

    remQueueTruck: (state, payload) => {
			let id = Number( payload.payload.id )
			let remIndex = state.queue.findIndex( inx => inx.id === id )
			state.queue.splice(remIndex, 1)
		},

    parkTruck: (state, payload) => {
			const o = payload.payload
			state.ramps[o.index].truck = o.truck
		},

    unparkTruck: (state, payload) => {
			let index = payload.payload.id
			let rReady = state.ramps.findIndex( ramp => ramp.truck.id === Number(index) )
			state.ramps[rReady].truck = {}
		},

		// useless ?
    addPalToTruck: (state, payload) => {
			//state.queue.push( payload.payload )
		},

		// useless ?
    remPalFrTruck: (state, payload) => {
			//state.queue.push( payload.payload )
		},

		addPal: (state, payload) => {
			let name = payload.payload.name
			let index = payload.payload.index
			// payload iz pallet or truck
			let object = payload.payload.pallet

			if (name === "zone") {
				state.zones[index].pallets.push( object ) 
			}
			if (name === "ramp") {
				state.ramps[index].pallets.push( object ) 
			}
			if (name === "truck") {
				state.ramps[index].truck.pallets.push( object ) 
			}
		},

		removePal: (state, payload) => {
			const name = payload.payload.name
			const index = payload.payload.index
			const id = payload.payload.id

			if (name === "zone") {
				let rmIndex = state.zones[index].pallets.findIndex( inx => inx.id === id )
				state.zones[index].pallets.splice(rmIndex, 1)
			}

			if (name === "ramp") {
				let rmIndex = state.ramps[index].pallets.findIndex( inx => inx.id === id )
				state.ramps[index].pallets.splice(rmIndex, 1)
			}

			if (name === "truck") {
				let rampIndex = state.ramps.findIndex( ramp => ramp.truck.id === Number(index) )
				let rmIndex = state.ramps[rampIndex].truck.pallets.findIndex( inx => inx.id === id )
				state.ramps[rampIndex].truck.pallets.splice(rmIndex, 1)
			}
		},

		checkTrucks: (state) => {
			let rReady = state.ramps.findIndex( ramp => ramp.truck.id && 
																									ramp.truck.pallets.length === 0 && 
																									ramp.pallets.length === 0 )
			if (rReady >= 0) {
				//console.log("rampReady",rReady)
			  state.ramps[rReady].truck.ready = true
			}
		},

    dump: (state) => {
			console.log("ALL", JSON.stringify(state, null, 2) )
		},

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});


//export const selectCount = (state) => state.counter

export const { addQueueTruck, remQueueTruck, addPalToTruck, remPalFrTruck, 
							 parkTruck, unparkTruck, checkTrucks,
							 addPal, removePal, dump } = storeSlice.actions;

export default storeSlice.reducer;
