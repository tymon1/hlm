import { createSlice } from '@reduxjs/toolkit';
// import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
//
import { genTruck } from '../app/helpers.js';



export const storeSlice = createSlice({

  name: 'store',

  initialState: {

		counter: { palletId: 1, truckId: 1 }, 

		// trucks with load waiting in line for unload
		queue: [],

		docks: [
			{ no: 0, truck: {} },
			{ no: 1, truck: {} },
			{ no: 2, truck: {} }
		],

		ramps: [
			{ no: 0, pallets: [], 
				truck: {} },
			{ no: 1, pallets: [], 
				truck: {} },
			{ no: 2, pallets: [], 
				truck: {} },
		],

		// store zones with pallets
		zones: [
			{ no: 0, pallets: [] },
			{ no: 1, pallets: [] },
			{ no: 2, pallets: [] },
			{ no: 3, pallets: [] },
			{ no: 4, pallets: [] },
			{ no: 5, pallets: [] },
			{ no: 6, pallets: [] },
			{ no: 7, pallets: [] },
		],
	},


  // REDUCERS 
  reducers: {

    addQueueTruck: (state, type) => {
			let tid = state.counter.truckId 
			let pid = state.counter.palletId 
			state.queue.push( genTruck(tid, pid, type.payload) )
			let len = state.queue.length -1
			let currId = state.counter.palletId 
			let palLen = state.queue[len].pallets.length 
			state.counter.palletId = currId + palLen
			state.counter.truckId++ 
			//console.log("truck",state.queue[len].id ,"pellets",JSON.stringify(state.queue[len].pallets) )
		},

    remQueueTruck: (state, payload) => {
			let id = Number( payload.payload.id )
			let remIndex = state.queue.findIndex( inx => inx.id === id )
			state.queue.splice(remIndex, 1)
		},

    parkTruck: (state, payload) => {
			const o = payload.payload
			state.docks[o.index].truck = o.truck
		},

    unparkTruck: (state, payload) => {
			let index = payload.payload.id
			let rReady = state.docks.findIndex( d => d.truck.id === Number(index) )
			if (rReady >= 0) {
				state.docks[rReady].truck = {}
			}
		},

    incAmountPalletId: (state, payload) => {
			let cId = state.counter.palletId
			state.counter.palletId = cId + Number( payload.payload.amount )
		},

		// useless ?
    addPalToTruck: (state, payload) => {
			//state.queue.push( payload.payload )
		},

		// useless ?
    remPalFrTruck: (state, payload) => {
			//state.queue.push( payload.payload )
		},

		addPal: (state, payload) => {
			let name = payload.payload.name
			let index = payload.payload.index
			// payload iz pallet or truck
			let object = payload.payload.pallet

			if (name === "zone") {
				state.zones[index].pallets.push( object ) 
			}
			if (name === "ramp") {
				state.ramps[index].pallets.push( object ) 
			}
			if (name === "truck") {
				state.ramps[index].truck.pallets.push( object ) 
			}
		},

		removePal: (state, payload) => {
			const name = payload.payload.name
			const index = payload.payload.index
			const id = payload.payload.id

			if (name === "zone") {
				let rmIndex = state.zones[index].pallets.findIndex( inx => inx.id === id )
				state.zones[index].pallets.splice(rmIndex, 1)
			}

			if (name === "ramp") {
				let rmIndex = state.ramps[index].pallets.findIndex( inx => inx.id === id )
				state.ramps[index].pallets.splice(rmIndex, 1)
			}

			if (name === "truck") {
				let dockIndex = state.docks.findIndex( d => d.truck.id === Number(index) )
				let rmIndex = state.docks[dockIndex].truck.pallets.findIndex( inx => inx.id === id )
				state.docks[dockIndex].truck.pallets.splice(rmIndex, 1)
			}
		},

		checkTrucks: (state) => {
			let dReady = state.docks.findIndex( dock => dock.truck.id && 
																									dock.truck.pallets.length === 0 )
			if (dReady >= 0 && state.ramps[dReady].pallets.length === 0 ) {
			  state.docks[dReady].truck.empty = true
			}
		},

    dump: (state) => {
			console.log("ALL", JSON.stringify(state, null, 2) )
		},

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});


//export const selectCount = (state) => state.counter

export const { addQueueTruck, remQueueTruck, addPalToTruck, remPalFrTruck, 
							 parkTruck, unparkTruck, checkTrucks,
							 addPal, removePal, dump } = storeSlice.actions;

export default storeSlice.reducer;
